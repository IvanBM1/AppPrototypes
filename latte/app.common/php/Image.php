<?php

/**
 * Stub generated by xlatte
 */
class Image extends imageBase
{
	const DESKTOP = 1;
	const MOBILE = 2;

	/**
	 * @remote
	 * @param number[] $group
	 * @return boolean
	 */
	public static function archivedGroup($group)
	{
		foreach ($group as $idimage) {
		    $image = self::searchOne(array(['idimage' => $idimage]));
			$image->archived = true;
			$image->save();
		}
		return true;
	}

	/**
	 * @remote
	 * @param number $idcategory
	 * @return any[][]
	 */
	public static function byCategory($idcategory)
	{
		$send = [];

		$desktop = DL::arrayOf('Image', "
			SELECT #COLUMNS
			FROM image
			WHERE idcategory = '$idcategory'
				AND type = 1
				AND trash = false
				AND archived = false
			ORDER BY name
		");

		$mobile = DL::arrayOf('Image', "
			SELECT #COLUMNS
			FROM image
			WHERE idcategory = '$idcategory'
				AND type = 2
				AND trash = false
				AND archived = false
			ORDER BY name
		");

		$send[0] = $desktop;
		$send[1] = $mobile;

		return $send;
	}

	/**
	 * @remote
	 * @param string $guid
	 * @return Image
	 */
	public static function byGuid($guid)
	{
		return DL::oneOf('Image', "
			SELECT #COLUMNS 
			FROM image 
				JOIN category USING (idcategory)
			WHERE image.guid = '$guid'
				AND image.trash = false
				AND image.archived = false
				AND category.trash = false
		");
	}

	/**
	 * @remote
	 * @param number $idhistory
	 * @return Image
	 */
	public static function byHistory($idhistory){
		$history = DL::oneOf('History', "
			SELECT #COLUMNS
			FROM history
			WHERE idhistory = '$idhistory'
		");

		return DL::oneOf('Image',"
			SELECT #COLUMNS
			FROM image
			WHERE idimage = '$history->idimage'
		");
	}

	/**
	 * @remote
	 * @param number $idimage
	 * @return boolean
	 */
	public static function isArchived($idimage)
	{
		$result = DL::oneOf('Image', "
			SELECT archived
			FROM image
			WHERE idimage = '$idimage'
		");
		return $result->archived;
	}

	/**
	 * @remote
	 * @param number $idcategory
	 * @param boolean $archived
	 * @return any
	 */
	public static function imageAssociate($idcategory, $archived)
	{
		$images = DL::arrayOf('Image', "
			SELECT #COLUMNS
			FROM image
			WHERE idassociate != 0
				AND type = 1
				AND idcategory = '$idcategory'
				AND trash = false
			ORDER BY name
		");

		if ($images) {
			$arraySend = array();
			foreach ($images as $image) {

				$arrayPar = array();
				$associate = DL::oneOf('Image', "
					SELECT #COLUMNS
					FROM image
					WHERE idimage = '$image->idassociate'
						AND trash = false
				");

				if ($archived) {
					if ($image->archived || $associate->archived) {
						array_push($arrayPar, $image);
						array_push($arrayPar, $associate);
						array_push($arraySend, $arrayPar);
					}
				} else {
					array_push($arrayPar, $image);
					array_push($arrayPar, $associate);
					array_push($arraySend, $arrayPar);
				}

			}

			return $arraySend;
		}

		return null;
	}

	/**
	 * @remote
	 * @param number $idcategory
	 * @param boolean $archived
	 * @return Image[]
	 */
	public static function notAssociate($idcategory, $archived)
	{
		return DL::arrayOf('Image', "
			SELECT #COLUMNS
			FROM image
			WHERE idcategory = '$idcategory'
				AND idassociate = 0
				AND archived = '$archived'
				AND trash = false
			ORDER BY name
		");
	}

	/**
	 * @remote
	 * @param any $group
	 * @return boolean
	 */
	public static function removeGroup($group)
	{

		foreach ($group as $idimage) {

			$image = DL::oneOf('Image', "
				SELECT #COLUMNS 
				FROM image 
				WHERE idimage = '$idimage' 
			");

			$image->trash = true;

			if ($image->idassociate != 0) {
				$associate = DL::oneOf('Image', "
					SELECT #COLUMNS
					FROM image 
					WHERE idimage = '$image->idassociate' 
				");

				$associate->idassociate = 0;
				$associate->save();

				$image->idassociate = 0;
			}

			$image->save();
		}

		return true;
	}

	/**
	 * @remote
	 * @param any $group
	 * @return boolean
	 */
	public static function archiveGroup($group)
	{
		foreach ($group as $idimage) {
			$image = DL::oneOf('Image', "
				SELECT #COLUMNS
				FROM image 
				WHERE idimage = '$idimage' 
			");

			$image->archived = true;
			$image->save();
		}

		return true;
	}

	/**
	 * @remote
	 * @param any $group
	 * @return boolean
	 */
	public static function unarchiveGroup($group)
	{
		foreach ($group as $idimage) {
			$image = DL::oneOf('Image', "
				SELECT #COLUMNS 
				FROM image 
				WHERE idimage = '$idimage' 
			");

			$image->archived = false;
			$image->save();
		}

		return true;
	}

	/**
	 * @remote
	 * @param any $group
	 * @return boolean
	 */
	public static function unarchivedGroup($group)
	{
		foreach ($group as $idimage) {
			$image = DL::oneOf('Image', "
				SELECT #COLUMNS 
				FROM image 
				WHERE idimage = '$idimage' 
			");

			$image->archived = false;
			$image->save();
		}
		return true;
	}

	/**
	 * create GUID
	 * @return string
	 */
	function getGUID()
	{
		mt_srand((double)microtime() * 10000);
		$charid = strtoupper(md5(uniqid(rand(), true)));
		return $charid;
	}

	/**
	 * @override
	 * @return boolean
	 */
	public function onInserting()
	{
		$this->created = DL::dateTime();
		$this->guid = $this->getGUID();
		return true;
	}


    /**
     * @remote
     * @param object $options
     * @param string $orderBy
     * @return Image
     */
    public static function searchOne($options, $orderBy = ""){

        $query = "SELECT #COLUMNS FROM image";

        $options = self::isAuthorized($options);
        $query = self::addOptions($query, $options);
        $query = self::addOrderBy($query, $orderBy);

        return DL::oneOf('Image', $query);
    }

    /**
     * @remote
     * @param object $options
     * @param string $orderBy
     * @return Image[]
     */
    public static function search($options, $orderBy = ""){

        $query = "SELECT #COLUMNS FROM image";

        $options = self::isAuthorized($options);
        $query = self::addOptions($query, $options);
        $query = self::addOrderBy($query, $orderBy);

        return DL::arrayOf('Image', $query);
    }

    static function addOptions($query, $options){
        $size = 0;
        if($options != null) $size = count($options);
        if($size > 0) {
            $query .= " WHERE "; $i = 0;
            foreach ($options as $key => $value) {
                if( $value != null ){
                    $query .= "$key = '$value'";$i++;
                    if ($i < $size) $query .= " AND ";
                }
            }
        }
        return $query;
    }

    static function addOrderBy($query, $orderBy){
        if($orderBy != "")
            $query .= " ORDER BY ". $orderBy;
        return $query;
    }

    static function isAuthorized($options){
        if(!isset($_SESSION['iduser'])){
            $options['archived'] = 'false';
            $options['trash'] = 'false';
        }
        return $options;
    }
}